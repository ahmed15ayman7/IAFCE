generator client1 {
  provider = "prisma-client-js"
  output   = "../../../apps/backend/generated/prisma_client"
}

generator client2 {
  provider = "prisma-client-js"
  output   = "../../../apps/frontend/generated/prisma_client"
}

generator client3 {
  provider = "prisma-client-js"
  output   = "../../../apps/admin/generated/prisma_client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// User and Authentication
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  phone         String?
  firstName     String
  lastName      String
  role          UserRole       @default(STUDENT)
  subRole       String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  academyId     String?
  isOnline      Boolean        @default(false)
  isVerified    Boolean        @default(false)
  age           Int?
  academy       Academy?       @relation(fields: [academyId], references: [id])
  profile       Profile?
  enrollments   Enrollment[]
  achievements  Achievement[]
  notifications Notification[]
  messages      Message[]
  posts         Post[]
  groups        Group[]
  channels      Channel[]
  bookmarks     Bookmark[]
  Submission    Submission[]
  Attendance    Attendance[]
  payments      Payment[]
  installments  Installment[]

  Instructor Instructor[]

  Owner Owner[]

  Admin Admin[]

  Lesson Lesson[]

  Report Report[]

  Badge Badge[]

  Certificate Certificate[]

  Community Community[]

  LiveRoom LiveRoom[]

  NotificationSettings NotificationSettings[]

  Path Path[]

  LoginHistory LoginHistory[]

  TwoFactor TwoFactor[]

  UserAcademyCEO         UserAcademyCEO[]
  SalaryPayment          SalaryPayment[]
  MeetingParticipant     MeetingParticipant[]
  LegalCase              LegalCase[]
  traineeManagement      TraineeManagement[]
  trainingSchedules      TrainingSchedule[]
  employeeAttendanceLogs EmployeeAttendanceLog[]
}

model LoginHistory {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  success   Boolean      @default(false)
  ip        String?
  device    LoginDevice?
  location  String?
  browser   String?
  os        String?
  createdAt DateTime     @default(now())
}

model TwoFactor {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  email         Boolean  @default(false)
  sms           Boolean  @default(false)
  authenticator Boolean  @default(false)
  secret        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum LoginDevice {
  DESKTOP
  MOBILE
  TABLET
  LAPTOP
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  PARENT
  ADMIN
  ACADEMY
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  bio         String?
  phone       String?
  address     String?
  preferences Json?
}

model UserAcademyCEO {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  academyId String
  academy   Academy  @relation(fields: [academyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Academy Management
model Academy {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  logo                  String?
  settings              Json?
  users                 User[]
  ceos                  UserAcademyCEO[]
  courses               Course[]
  instructors           Instructor[]
  events                Event[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  AccountingEntry       AccountingEntry[]
  PublicRelationsRecord PublicRelationsRecord[]
  Meeting               Meeting[]
  LegalCase             LegalCase[]
  Testimonial           Testimonial[]
  mediaAlerts           MediaAlert[]
  partnershipAgreements PartnershipAgreement[]
  csrProjects           CSRProject[]
}

model Instructor {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  academyId String
  academy   Academy  @relation(fields: [academyId], references: [id])
  courses   Course[]
}

// Course Management
model Course {
  id                String             @id @default(cuid())
  title             String
  description       String
  academyId         String
  image             String?
  level             String
  academy           Academy            @relation(fields: [academyId], references: [id])
  lessons           Lesson[]
  enrollments       Enrollment[]
  quizzes           Quiz[]
  instructors       Instructor[]
  liveRoom          LiveRoom[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  status            CourseStatus       @default(PENDING)
  Path              Path[]
  Testimonial       Testimonial[]
  trainingSchedules TrainingSchedule[]
}

enum CourseStatus {
  PENDING
  ACTIVE
  COMPLETED
}

model Path {
  id             String      @id @default(cuid())
  title          String
  milestones     Milestone[]
  description    String?
  level          String
  completedTasks Int         @default(0)
  courses        Course[]
  peers          User[]
  remainingTime  Int         @default(0)
  studyTime      Int         @default(0)
  totalTasks     Int         @default(0)
  progress       Float       @default(0)
  engagement     Float       @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  status      MilestoneStatus @default(IN_PROGRESS)
  pathId      String
  path        Path            @relation(fields: [pathId], references: [id])
  createdAt   DateTime        @default(now())
}

enum MilestoneStatus {
  IN_PROGRESS
  COMPLETED
  NOT_STARTED
}

enum LessonStatus {
  IN_PROGRESS
  COMPLETED
  NOT_STARTED
}

model Lesson {
  id          String       @id @default(cuid())
  title       String
  content     String
  // videoUrl    String?
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  files       File[]
  quizzes     Quiz[]
  completedBy User[]
  status      LessonStatus @default(NOT_STARTED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Attendance  Attendance[]
}

model File {
  id                String                 @id @default(cuid())
  name              String
  url               String
  type              FileType
  lessonId          String?
  lesson            Lesson?                @relation(fields: [lessonId], references: [id])
  accountingEntryId String?
  accountingEntry   AccountingEntry?       @relation(fields: [accountingEntryId], references: [id])
  prRecordId        String?
  prRecord          PublicRelationsRecord? @relation(fields: [prRecordId], references: [id])
  meetingId         String?
  meeting           Meeting?               @relation(fields: [meetingId], references: [id])
  adminRoleId       String?
  adminRole         AdminRole?             @relation(fields: [adminRoleId], references: [id])
  legalCaseId       String?
  legalCase         LegalCase?             @relation(fields: [legalCaseId], references: [id])
  secretaryFiles    SecretaryFiles[]
  traineeManagement TraineeManagement[]
  createdAt         DateTime               @default(now())
}

enum FileType {
  VIDEO
  PDF
  DOCUMENT
  IMAGE
  AUDIO
}

// Enrollment and Progress
model Enrollment {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  courseId          String
  course            Course              @relation(fields: [courseId], references: [id])
  progress          Float               @default(0)
  status            String              @default("ACTIVE")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  traineeManagement TraineeManagement[]
}

// Assessment and Quizzes
model Quiz {
  id           String       @id @default(cuid())
  title        String
  description  String?
  lessonId     String
  lesson       Lesson       @relation(fields: [lessonId], references: [id])
  questions    Question[]
  submissions  Submission[]
  timeLimit    Int?
  passingScore Int?
  upComing     Boolean      @default(false)
  isCompleted  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Course Course[]
}

model Question {
  id         String   @id @default(cuid())
  text       String
  type       String
  options    Option[]
  isMultiple Boolean  @default(false)
  points     Int
  isAnswered Boolean  @default(false)
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  createdAt  DateTime @default(now())
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  text       String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Submission {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  answers   Json[]
  score     Float?
  feedback  String?
  passed    Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Achievements and Badges
model Achievement {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  value     Json
  isNew     Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Notifications
model Notification {
  id                 String            @id @default(cuid())
  userId             String
  user               User              @relation(fields: [userId], references: [id])
  type               NotificationType  @default(MESSAGE)
  message            String
  isImportant        Boolean           @default(false)
  urgent             Boolean           @default(false)
  title              String
  actionUrl          String?
  read               Boolean           @default(false)
  trainingScheduleId String?
  trainingSchedule   TrainingSchedule? @relation(fields: [trainingScheduleId], references: [id])
  createdAt          DateTime          @default(now())
}

enum NotificationType {
  ASSIGNMENT
  GRADE
  MESSAGE
  ACHIEVEMENT
  URGENT
  EVENT
  ABSENCE
}

model NotificationSettings {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  assignments  Boolean  @default(true)
  grades       Boolean  @default(true)
  messages     Boolean  @default(true)
  achievements Boolean  @default(true)
  urgent       Boolean  @default(true)
  email        Boolean  @default(true)
  push         Boolean  @default(true)
  createdAt    DateTime @default(now())
}

// Community and Communication
model Message {
  id        String   @id @default(cuid())
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  Channel Channel[]
}

model Post {
  id         String    @id @default(cuid())
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  content    String
  title      String
  createdAt  DateTime  @default(now())
  likesCount Int       @default(0)
  comments   Comment[]

  Group Group[]

  Community Community[]

  Discussion              Discussion[]
  PublicRelationsRecord   PublicRelationsRecord? @relation(fields: [publicRelationsRecordId], references: [id])
  publicRelationsRecordId String?
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model Group {
  id        String   @id @default(cuid())
  name      String
  subject   String
  image     String?
  members   User[]
  adminId   String
  posts     Post[]
  admin     Admin    @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())

  Community Community[]
}

model Admin {
  id                String                  @id @default(cuid())
  userId            String
  user              User                    @relation(fields: [userId], references: [id])
  createdAt         DateTime                @default(now())
  Group             Group[]
  accountingEntries AccountingEntry[]
  prRecords         PublicRelationsRecord[]
  prResponses       PRResponse[]
  meetings          Meeting[]
  assignments       AdminAssignment[]
  legalCases        LegalCase[]
  expenses          Expense[]

  AdminRole              AdminRole[]
  AboutSection           AboutSection[]
  NewsEvent              NewsEvent[]
  SuccessStory           SuccessStory[]
  ContactMessage         ContactMessage[]
  BlogPost               BlogPost[]
  CSRProject             CSRProject[]
  CrisisCommunication    CrisisCommunication[]
  paymentLogs            PaymentLogBySecretary[]
  secretaryFiles         SecretaryFiles[]
  employeeAttendanceLogs EmployeeAttendanceLog[]
  sentMessages           InternalMessage[]       @relation("SentMessages")
  receivedMessages       InternalMessage[]       @relation("ReceivedMessages")
}

model Channel {
  id          String                 @id @default(cuid())
  name        String
  members     User[]
  ownerId     String
  owner       Owner                  @relation(fields: [ownerId], references: [id])
  messages    Message[]
  prRecordId  String?
  prRecord    PublicRelationsRecord? @relation(fields: [prRecordId], references: [id])
  meetingId   String?
  meeting     Meeting?               @relation(fields: [meetingId], references: [id])
  adminRoleId String?
  adminRole   AdminRole?             @relation(fields: [adminRoleId], references: [id])
  legalCaseId String?
  legalCase   LegalCase?             @relation(fields: [legalCaseId], references: [id])
  createdAt   DateTime               @default(now())
}

model Owner {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  Channel Channel[]
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  itemId    String
  createdAt DateTime @default(now())
}

// Events and Calendar
model Event {
  id          String                 @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  academyId   String
  academy     Academy                @relation(fields: [academyId], references: [id])
  prRecordId  String?
  prRecord    PublicRelationsRecord? @relation(fields: [prRecordId], references: [id])
  adminRoleId String?
  adminRole   AdminRole?             @relation(fields: [adminRoleId], references: [id])
  legalCaseId String?
  legalCase   LegalCase?             @relation(fields: [legalCaseId], references: [id])
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

// Attendance Tracking
model Attendance {
  id        String   @id @default(cuid())
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  status    String // PRESENT, ABSENT, LATE
  method    String // FACE_ID, QR_CODE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String                  @id @default(cuid())
  userId        String
  user          User                    @relation(fields: [userId], references: [id])
  amount        Float
  method        PaymentMethod
  paidAt        DateTime                @default(now())
  branchId      String
  branch        Branch                  @relation(fields: [branchId], references: [id])
  installments  Installment[]
  legalCaseId   String?
  legalCase     LegalCase?              @relation(fields: [legalCaseId], references: [id])
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  secretaryLogs PaymentLogBySecretary[]
}

model Report {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  accountingEntryId String?
  accountingEntry   AccountingEntry? @relation(fields: [accountingEntryId], references: [id])
  meetingId         String?
  meeting           Meeting?         @relation(fields: [meetingId], references: [id])
  adminRoleId       String?
  adminRole         AdminRole?       @relation(fields: [adminRoleId], references: [id])
  legalCaseId       String?
  legalCase         LegalCase?       @relation(fields: [legalCaseId], references: [id])
  createdAt         DateTime         @default(now())
}

model Badge {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  image       String?
  points      Int
  type        String
  earnedAt    DateTime
  createdAt   DateTime @default(now())
}

model Certificate {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String
  notes       String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  url         String?
  image       String?
  points      Int
  type        String
  earnedAt    DateTime
  createdAt   DateTime @default(now())
}

model Community {
  id           String       @id @default(cuid())
  name         String
  image        String?
  description  String?
  type         String
  groups       Group[]
  liveRoom     LiveRoom[]
  participants User[]
  posts        Post[]
  discussions  Discussion[]
  likes        Int          @default(0)
  dislikes     Int          @default(0)
  views        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Discussion {
  id          String    @id @default(cuid())
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  postId      String?
  post        Post?     @relation(fields: [postId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LiveRoom {
  id                  String    @id @default(cuid())
  title               String
  topic               String?
  participants        Int       @default(0)
  isLive              Boolean   @default(false)
  isActive            Boolean   @default(false)
  isPublic            Boolean   @default(false)
  isPrivate           Boolean   @default(false)
  isPasswordProtected Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  communityId         String
  community           Community @relation(fields: [communityId], references: [id])
  User                User[]
  courseId            String?
  course              Course?   @relation(fields: [courseId], references: [id])
}

// ============ الإدارة الداخلية للأكاديمية ============

// المحاسبة
enum AccountingType {
  EXPENSE
  INCOME
  SALARY
  ADVANCE
  INVOICE
}

model AccountingEntry {
  id               String         @id @default(cuid())
  type             AccountingType
  amount           Float
  description      String
  date             DateTime
  createdByAdminId String
  createdByAdmin   Admin          @relation(fields: [createdByAdminId], references: [id])
  academyId        String
  academy          Academy        @relation(fields: [academyId], references: [id])
  invoice          Invoice?
  salaryPayment    SalaryPayment?
  files            File[]
  reports          Report[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Invoice {
  id                String          @id @default(cuid())
  invoiceNumber     String          @unique
  amount            Float
  description       String
  dueDate           DateTime
  status            InvoiceStatus   @default(PENDING)
  accountingEntryId String          @unique
  accountingEntry   AccountingEntry @relation(fields: [accountingEntryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model SalaryPayment {
  id                String          @id @default(cuid())
  employeeId        String
  employee          User            @relation(fields: [employeeId], references: [id])
  amount            Float
  month             Int
  year              Int
  accountingEntryId String          @unique
  accountingEntry   AccountingEntry @relation(fields: [accountingEntryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// العلاقات العامة
enum PRRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model PublicRelationsRecord {
  id               String          @id @default(cuid())
  message          String
  senderName       String
  senderContact    String
  status           PRRequestStatus @default(PENDING)
  handledByAdminId String
  handledByAdmin   Admin           @relation(fields: [handledByAdminId], references: [id])
  academyId        String
  academy          Academy         @relation(fields: [academyId], references: [id])
  responses        PRResponse[]
  events           Event[]
  posts            Post[]
  files            File[]
  channels         Channel[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model PRResponse {
  id                 String                @id @default(cuid())
  response           String
  prRecordId         String
  prRecord           PublicRelationsRecord @relation(fields: [prRecordId], references: [id])
  respondedByAdminId String
  respondedByAdmin   Admin                 @relation(fields: [respondedByAdminId], references: [id])
  createdAt          DateTime              @default(now())
}

// السكرتارية
model Meeting {
  id               String               @id @default(cuid())
  meetingTitle     String
  meetingDate      DateTime
  location         String
  notes            String?
  createdByAdminId String
  createdByAdmin   Admin                @relation(fields: [createdByAdminId], references: [id])
  academyId        String
  academy          Academy              @relation(fields: [academyId], references: [id])
  participants     MeetingParticipant[]
  files            File[]
  reports          Report[]
  channels         Channel[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model MeetingParticipant {
  id         String   @id @default(cuid())
  meetingId  String
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  isAttended Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// الإدارة العامة
enum AdminRoleType {
  DIRECTOR
  ACCOUNTANT
  SECRETARY
  LEGAL_ADVISOR
  HR_MANAGER
  IT_MANAGER
  GENERAL_MANAGER
  ADMIN
  SUPER_ADMIN
  PUBLIC_RELATIONS
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  AdminRole AdminRole[]
}

model AdminRole {
  id          String            @id @default(cuid())
  name        AdminRoleType
  description String?
  adminId     String
  admin       Admin             @relation(fields: [adminId], references: [id])
  assignments AdminAssignment[]
  permissions Permission[]
  reports     Report[]
  files       File[]
  events      Event[]
  channels    Channel[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model AdminAssignment {
  id        String    @id @default(cuid())
  adminId   String
  admin     Admin     @relation(fields: [adminId], references: [id])
  roleId    String
  role      AdminRole @relation(fields: [roleId], references: [id])
  startDate DateTime
  endDate   DateTime?
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// الشؤون القانونية
enum LegalCaseType {
  CONTRACT
  DISPUTE
  INSURANCE
  EMPLOYMENT
  INTELLECTUAL_PROPERTY
}

enum LegalCaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  PENDING
}

model LegalCase {
  id               String          @id @default(cuid())
  caseTitle        String
  caseType         LegalCaseType
  status           LegalCaseStatus @default(OPEN)
  description      String
  courtDate        DateTime?
  assignedLawyerId String
  assignedLawyer   Admin           @relation(fields: [assignedLawyerId], references: [id])
  academyId        String
  academy          Academy         @relation(fields: [academyId], references: [id])
  relatedUserId    String?
  relatedUser      User?           @relation(fields: [relatedUserId], references: [id])
  files            File[]
  reports          Report[]
  events           Event[]
  channels         Channel[]
  payments         Payment[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  ELECTRONIC
  INSTALLMENT
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseType {
  SALARY
  RENT
  UTILITIES
  MAINTENANCE
  MARKETING
  OTHER
}

model Installment {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  amount    Float
  dueDate   DateTime
  status    InstallmentStatus @default(PENDING)
  paymentId String?
  payment   Payment?          @relation(fields: [paymentId], references: [id])
  branchId  String
  branch    Branch            @relation(fields: [branchId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Expense {
  id             String      @id @default(cuid())
  type           ExpenseType
  amount         Float
  description    String?
  paidAt         DateTime    @default(now())
  branchId       String
  branch         Branch      @relation(fields: [branchId], references: [id])
  createdBy      String
  createdByAdmin Admin       @relation(fields: [createdBy], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Branch {
  id           String         @id @default(cuid())
  name         String
  address      String?
  phone        String?
  email        String?
  payments     Payment[]
  installments Installment[]
  expenses     Expense[]
  finance      BranchFinance?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model BranchFinance {
  id            String   @id @default(cuid())
  branchId      String   @unique
  branch        Branch   @relation(fields: [branchId], references: [id])
  totalIncome   Float    @default(0)
  totalExpenses Float    @default(0)
  balance       Float    @default(0)
  lastUpdated   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// من نحن
model AboutSection {
  id          String   @id @default(cuid())
  title       String
  content     String
  image       String?
  type        String // رؤية / رسالة / قيمة / تاريخ / اعتمادات / هيكل / جوائز / شهادات
  createdById String
  createdBy   Admin    @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// المركز الإعلامي
model NewsEvent {
  id          String   @id @default(cuid())
  title       String
  content     String
  date        DateTime
  type        String // خبر / فعالية
  image       String?
  createdById String
  createdBy   Admin    @relation(fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SuccessStory {
  id           String   @id @default(cuid())
  title        String
  content      String
  image        String?
  videoUrl     String?
  graduateName String
  position     String
  createdById  String
  createdBy    Admin    @relation(fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  feedback  String
  rating    Int
  image     String?
  videoUrl  String?
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id])
  academyId String
  academy   Academy  @relation(fields: [academyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// تواصل معنا
model ContactMessage {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  message       String
  status        String // جديد / تم الرد
  response      String?
  respondedById String?
  respondedBy   Admin?   @relation(fields: [respondedById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// الأسئلة الشائعة
model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// المقالات والمدونات
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  coverImage  String?
  authorId    String
  author      Admin    @relation(fields: [authorId], references: [id])
  tags        String[]
  publishDate DateTime
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// الشراكات والبروتوكولات
model Partnership {
  id          String    @id @default(cuid())
  partnerName String
  type        String // محلية / دولية / أكاديمية / مجتمعية
  description String
  logo        String?
  startDate   DateTime
  endDate     DateTime?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// المسؤولية المجتمعية
model CSRProject {
  id             String   @id @default(cuid())
  title          String
  description    String
  impact         String
  images         String[]
  startDate      DateTime
  status         String
  assignedTeamId String
  assignedTeam   Admin    @relation(fields: [assignedTeamId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Academy Academy[]
}

// إدارة الأزمات والتواصل
model CrisisCommunication {
  id           String   @id @default(cuid())
  title        String
  type         String
  summary      String
  responsePlan String
  handledById  String
  handledBy    Admin    @relation(fields: [handledById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// العلاقات العامة - نماذج إضافية
model MediaAlert {
  id          String   @id @default(cuid())
  title       String
  triggerDate DateTime
  sourceType  String // COURSE, EVENT, INTERNAL
  sourceId    String
  generated   Boolean  @default(false)
  status      String   @default("PENDING") // PENDING, PUBLISHED, ARCHIVED
  academyId   String
  academy     Academy  @relation(fields: [academyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PartnershipAgreement {
  id          String    @id @default(cuid())
  partnerName String
  description String
  logo        String?
  type        String // LOCAL, INTERNATIONAL, ACADEMIC, COMMUNITY
  startDate   DateTime
  endDate     DateTime?
  academyId   String
  academy     Academy   @relation(fields: [academyId], references: [id])
  status      String    @default("ACTIVE") // ACTIVE, EXPIRED, TERMINATED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// السكرتارية - الموديلات الجديدة
model SecretariatDashboard {
  id               String   @id @default(cuid())
  totalStudents    Int      @default(0)
  activeCourses    Int      @default(0)
  todayMeetings    Int      @default(0)
  newNotifications Int      @default(0)
  totalPayments    Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TraineeManagement {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  enrollmentId String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  notes        String?
  documents    File[]
  status       String     @default("ACTIVE") // ACTIVE, SUSPENDED, COMPLETED
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model TrainingSchedule {
  id            String         @id @default(cuid())
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime
  type          String // CLASS, MEETING, EXAM
  courseId      String?
  course        Course?        @relation(fields: [courseId], references: [id])
  location      String?
  participants  User[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model QuickActionLink {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentLogBySecretary {
  id          String   @id @default(cuid())
  paymentId   String
  payment     Payment  @relation(fields: [paymentId], references: [id])
  secretaryId String
  secretary   Admin    @relation(fields: [secretaryId], references: [id])
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InternalMessage {
  id         String   @id @default(cuid())
  title      String
  content    String
  senderId   String
  sender     Admin    @relation("SentMessages", fields: [senderId], references: [id])
  recipients Admin[]  @relation("ReceivedMessages")
  isRead     Boolean  @default(false)
  priority   String   @default("NORMAL") // HIGH, NORMAL, LOW
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SecretaryFiles {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileId      String
  file        File     @relation(fields: [fileId], references: [id])
  category    String
  tags        String[]
  secretaryId String
  secretary   Admin    @relation(fields: [secretaryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmployeeAttendanceLog {
  id          String    @id @default(cuid())
  employeeId  String
  employee    User      @relation(fields: [employeeId], references: [id])
  checkIn     DateTime
  checkOut    DateTime?
  status      String    @default("PRESENT") // PRESENT, ABSENT, LATE
  notes       String?
  secretaryId String
  secretary   Admin     @relation(fields: [secretaryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
